# Django Vegetarian Cookbook, Copyright Â© 2018 Sergey Panasenko. Contacts: <sergey.panasenko@gmail.com>
# License: https://opensource.org/licenses/AGPL-3.0

from browser import window
import json

cl = window.console.log
jq = window.jQuery



class Recipe:
    def __init__(self, id, ingredients, weight):
        self.id = id
        self.default_weight = int(weight)
        self.ingredients = ingredients[:]
        if weight == 0:
            for ingredient in ingredients:
                weight = weight + int(ingredient.weight)
        self.calculated_weight = weight
        self.weight = weight
        self.energytotal = '--'
        self.energy = '--'
        self.status = ''
        self.calculate()
        self.interface()
        self.show()

    def total_weight_change(self, weight):
        self.weight = weight
        k = self.weight / (self.default_weight if self.default_weight else self.calculated_weight)
        weight = 0
        for ingredient in self.ingredients:
            ingredient.weight = int(ingredient.default_weight * k)
            weight = weight + ingredient.weight
        self.weight = weight
        self.calculate()

    def ingridient_weight_change(self, id, value):
        weight = 0
        for ingredient in self.ingredients:
            if ingredient.id == id:
                ingredient.weight = value
            weight = weight + ingredient.weight
        self.default_weight = 0
        self.weight = weight
        self.calculated_weight = weight
        self.calculate()

    def calculate(self):
        energy = 0
        self.protein = 0
        self.fat = 0
        self.carbohydrate = 0
        self.status = ''
        for ingredient in self.ingredients:
            if ingredient.energy == 'None':
                self.status = u'One or some ingridients not has energy info'
            else:
                ingredient.calculated_energy = float(ingredient.energy) * ingredient.weight / 100
                energy = energy + ingredient.calculated_energy
            ingredient.protein = ingredient.protein100 / 100 * ingredient.weight
            ingredient.fat = ingredient.fat100 / 100 * ingredient.weight
            ingredient.carbohydrate = ingredient.carbohydrate100 / 100 * ingredient.weight
            self.protein = self.protein + ingredient.protein
            self.fat = self.fat + ingredient.fat
            self.carbohydrate = self.carbohydrate + ingredient.carbohydrate
        self.energytotal = float(energy)
        self.energy = float(energy / self.weight * 100)
        self.protein100 = float(self.protein / self.weight * 100)
        self.fat100 = float(self.fat / self.weight * 100)
        self.carbohydrate100 = float(self.carbohydrate / self.weight * 100)

    def interface(self):
        recipe_div = jq('.js_recipe.js_recipe-' + str(self.id))
        # user change total weight
        recipe_div.find('.js_weigth').bind('change', self._total_weight_change)
        # user change one ingridient weight
        recipe_div.find('.js_recipe_ingredient_weight').bind('change', self._ingridient_weight_change)

    def show(self):
        recipe_div = jq('.js_recipe.js_recipe-' + str(self.id))
        recipe_div.find('.js_weigth').val(self.weight)
        recipe_div.find('.js_energy').html("%.1f" % self.energy)
        recipe_div.find('.js_protein').html("%.1f" % self.protein)
        recipe_div.find('.js_fat').html("%.1f" % self.fat)
        recipe_div.find('.js_carbohydrate').html("%.1f" % self.carbohydrate)
        recipe_div.find('.js_protein100').html("%.1f" % self.protein100)
        recipe_div.find('.js_fat100').html("%.1f" % self.fat100)
        recipe_div.find('.js_carbohydrate100').html("%.1f" % self.carbohydrate100)
        recipe_div.find('.js_energytotal').html(int(self.energytotal))
        for ingredient in self.ingredients:
            ingredient_line = recipe_div.find('.js_recipe_ingredient-' + str(ingredient.id))
            ingredient_line.find('.js_recipe_ingredient_weight').val(ingredient.weight)
            ingredient_line.find('.js_recipe_ingredient_calculated_energy' ).html(ingredient.calculated_energy)
            ingredient_line.find('.js_recipe_ingredient_protein' ).html("%.1f" % ingredient.protein)
            ingredient_line.find('.js_recipe_ingredient_fat' ).html("%.1f" % ingredient.fat)
            ingredient_line.find('.js_recipe_ingredient_carbohydrate' ).html("%.1f" % ingredient.carbohydrate)
            if ingredient.weight != ingredient.default_weight:
                ingredient_line.find('.js_recipe_ingredient_easy').html('')
        if self.status == '':
            recipe_div.find('.js_message').hide().html('')
        else:
            recipe_div.find('.js_message').show().html(self.status)


    def _total_weight_change(self, event):
        weight = int(jq('.js_recipe.js_recipe-' + str(self.id) + ' .js_weigth').val())
        self.total_weight_change(weight)
        self.show()

    def _ingridient_weight_change(self, event):
        id = int(jq(event.target).parent().parent().data('id'))
        value = int(jq(event.target).val())
        self.ingridient_weight_change(id, value)
        self.show()




class Ingredient:
    def __init__(self, id, weight, energy, protein, fat, carbohydrate):
        self.id = id
        w = int(weight) if weight else 0
        self.weight = w
        self.default_weight = w
        self.energy = energy.replace(",", ".")
        self.calculated_energy = '--'

        self.protein100 = float(protein.replace(",", ".")) if protein != 'None' else 0
        self.fat100 = float(fat.replace(",", ".")) if fat != 'None' else 0
        self.carbohydrate100 = float(carbohydrate.replace(",", ".")) if carbohydrate != 'None' else 0




jq = window.jQuery
